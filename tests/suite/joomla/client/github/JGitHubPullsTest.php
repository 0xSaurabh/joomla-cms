<?php
/**
 * @package     Joomla.UnitTest
 * @subpackage  Client
 *
 * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

require_once JPATH_PLATFORM.'/joomla/client/github.php';
require_once JPATH_PLATFORM.'/joomla/client/github/pulls.php';

/**
 * Test class for JLDAP.
 * Generated by PHPUnit on 2009-10-08 at 21:48:52.
 */
class JGithubPullsTest extends PHPUnit_Framework_TestCase
{
	protected function getMethod($name)
	{
		$class = new ReflectionClass('JGithubGists');
		$method = $class->getMethod($name);
		$method->setAccessible(true);
		return $method;
	}

	/**
	 * Tests the getAll method - with open state
	 */
	public function testGetAllOpen()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->getAll('joomla','joomla-platform'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the getAll method - with closed state
	 */
	public function testGetAllClosed()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls?state=closed')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->getAll('joomla','joomla-platform', 'closed'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the get method
	 */
	public function testGet()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/325')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->get('joomla', 'joomla-platform', 325),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the create method
	 */
	public function testCreate()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$pull = new stdClass;
		$pull->title = 'My Pull Request';
		$pull->base = 'staging';
		$pull->head = 'joomla-jenkins:mychanges';
		$pull->body = 'These are my changes - please review them';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls', 'post', $pull)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->create('joomla', 'joomla-platform', 'My Pull Request', 'staging', 'joomla-jenkins:mychanges', 'These are my changes - please review them'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the createFromIssue method
	 */
	public function testCreateFromIssue()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$pull = new stdClass;
		$pull->base = 'staging';
		$pull->head = 'joomla-jenkins:mychanges';
		$pull->issue = 39;

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls', 'post', $pull)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->createFromIssue('joomla', 'joomla-platform', 39, 'staging', 'joomla-jenkins:mychanges'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the edit method
	 */
	public function testEdit()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$pull = new stdClass;
		$pull->title = 'new title';
		$pull->body = 'Check out my pull request';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/39', 'patch', $pull)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->edit('joomla', 'joomla-platform', 39, 'new title', 'Check out my pull request'),
			$this->equalTo('Returned Data')
		);
	}

}
