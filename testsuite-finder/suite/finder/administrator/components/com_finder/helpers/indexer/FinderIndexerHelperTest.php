<?php
/**
 * @package	    Joomla.UnitTest
 * @subpackage  com_finder
 *
 * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license	    GNU General Public License version 2 or later; see LICENSE
 */

require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/helper.php';

/**
 * Test class for FinderIndexerHelper.
 * Generated by PHPUnit on 2011-10-20 at 22:34:28.
 */
class FinderIndexerHelperTest extends JoomlaDatabaseTestCase
{
	/**
	 * @var FinderIndexerHelper
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		jimport('joomla.utilities.string');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * Gets the data set to be loaded into the database during setup
	 *
	 * @return  xml dataset
	 *
	 * @since   2.5
	 */
	protected function getDataSet()
	{
		return $this->createXMLDataSet(JPATH_TESTS . '/includes/testfiles/FinderDBTest.xml');
	}

	/**
	 * @todo Implement testParse().
	 */
	public function testParse()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testTokenize().
	 */
	public function testTokenize()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Test the truncate method.
	 *
	 * @return  void
	 *
	 * @since   2.5
	 */
	public function testTruncate()
	{
		$this->assertThat(
			FinderIndexerHelper::truncate('This string should truncate after 30 characters', '30'),
			$this->StringContains('This string should...'),
			'String is truncated to the second to last full word'
		);

		$this->assertThat(
			FinderIndexerHelper::truncate('This string will truncate after 35 characters', '35'),
			$this->StringContains('This string will truncate after...'),
			'String is truncated to the last full word'
		);

		$this->assertThat(
			FinderIndexerHelper::truncate("This string shouldn't truncate", '30'),
			$this->StringContains("This string shouldn't truncate"),
			'String is not truncated'
		);
	}

	/**
	 * @todo Implement testStem().
	 */
	public function testStem()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Test the addContentType method.
	 *
	 * @return  void
	 *
	 * @since   2.5
	 */
	public function testAddContentType()
	{
		$this->assertInternalType(
			'integer',
			FinderIndexerHelper::addContentType('PDF', 'pdf'),
			'Line:'.__LINE__.' addContentType should add a PDF type to the table.'
		);

		$this->assertInternalType(
			'integer',
			FinderIndexerHelper::addContentType('Article', ''),
			'Line:'.__LINE__.' addContentType should return the integer for the Article type.'
		);
	}

	/**
	 * @todo Implement testIsCommon().
	 */
	public function testIsCommon()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGetCommonWords().
	 */
	public function testGetCommonWords()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGetDefaultLanguage().
	 */
	public function testGetDefaultLanguage()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Test the getPrimaryLanguage method.
	 *
	 * @return  void
	 *
	 * @since   2.5
	 */
	public function testGetPrimaryLanguage()
	{
		$this->assertThat(
			FinderIndexerHelper::getPrimaryLanguage('en-GB'),
			$this->StringContains('en'),
			'The primary language is en'
		);
	}

	/**
	 * @todo Implement testGetContentPath().
	 */
	public function testGetContentPath()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGetContentExtras().
	 */
	public function testGetContentExtras()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testPrepareContent().
	 */
	public function testPrepareContent()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}
}
